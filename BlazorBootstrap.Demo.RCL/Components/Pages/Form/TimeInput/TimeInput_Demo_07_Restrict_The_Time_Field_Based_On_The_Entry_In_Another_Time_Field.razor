@using System.ComponentModel.DataAnnotations

<EditForm EditContext="@editContext" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit" class="@FormClass" novalidate>
    <DataAnnotationsValidator />

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Departure Time: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <FeatherIcon Name="FeatherIconName.Clock" Class="form-icon" />
                <TimeInput TValue="TimeOnly?"
                           Value="flightForm.DepartureTime"
                           ValueExpression="() => flightForm.DepartureTime"
                           ValueChanged="(value) => DepartureTimeChanged(value)" 
                           onfocus="this.showPicker()" />
                <ValidationMessage For="@(() => flightForm.DepartureTime)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Arrival Time: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <FeatherIcon Name="FeatherIconName.Clock" Class="form-icon" />
                <TimeInput @ref="arrivalTimeInput" TValue="TimeOnly?"
                           @bind-Value="flightForm.ArrivalTime"
                           EnableMinMax="true"
                           Min="arrivalMinTime"
                           Max="arrivalMaxTime"
                           Disabled="@disableArrivalTimeInput" 
                           onfocus="this.showPicker()" />
                <ValidationMessage For="@(() => flightForm.ArrivalTime)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="ResetForm">Reset</Button>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Submit</Button>
        </div>
    </div>
</EditForm>

@code {
    private TimeInput<TimeOnly?> arrivalTimeInput = default!;
    private bool disableArrivalTimeInput = true;

    private FlightForm flightForm = new();
    private EditContext? editContext;

    private TimeOnly? arrivalMinTime;
    private TimeOnly? arrivalMaxTime;

    private bool isPristineForm = true;
    private string FormClass
    {
        get
        {
            return isPristineForm ? "needs-validation" : "needs-validation was-validated";
        }
    }

    [Inject] ToastService ToastService { get; set; } = default!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(flightForm);
        base.OnInitialized();
    }

    private void DepartureTimeChanged(TimeOnly? departureTime)
    {
        if (departureTime is null || !departureTime.HasValue)
        {
            flightForm.DepartureTime = null;
            flightForm.ArrivalTime = null;
            arrivalMinTime = null;
            arrivalMaxTime = null;
            disableArrivalTimeInput = true;

            return;
        }

        flightForm.DepartureTime = departureTime;
        flightForm.ArrivalTime = null;
        arrivalMinTime = departureTime.Value.AddHours(1);
        arrivalMaxTime = departureTime.Value.AddHours(12);
        disableArrivalTimeInput = false;
    }

    public void HandleValidSubmit()
    {
        isPristineForm = false;

        var toastMessage = new ToastMessage
        (
            type: ToastType.Success,
            iconName: IconName.Check2All,
            title: "Success!",
            helpText: $"{DateTime.Now.ToLocalTime()}",
            message: "Flight schedule created."
        );

        ToastService.Notify(toastMessage);
    }

    public void HandleInvalidSubmit()
    {
        isPristineForm = false;
    }

    private void ResetForm()
    {
        isPristineForm = true;
        flightForm = new();
        editContext = new EditContext(flightForm);
    }

    public class FlightForm
    {
        [Required(ErrorMessage = "Departure Time required.")]
        public TimeOnly? DepartureTime { get; set; }

        [Required(ErrorMessage = "Arrival Time required.")]
        public TimeOnly? ArrivalTime { get; set; }
    }
}
