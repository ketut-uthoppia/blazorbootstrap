@using System.ComponentModel.DataAnnotations

<EditForm EditContext="@editContext" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit" class="@FormClass" novalidate>
    <DataAnnotationsValidator />

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Flight Number: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <TextInput class="form-control" @bind-Value="flightForm.FlightNumber" Placeholder="Enter Flight Number" />
                <ValidationMessage For="@(() => flightForm.FlightNumber)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Departure Date: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <FeatherIcon Name="FeatherIconName.Calendar" Class="form-icon" />
                <DateInput TValue="DateOnly?" @bind-Value="flightForm.DepartureDate" Placeholder="Enter Date" onfocus="this.showPicker()" />
                <ValidationMessage For="@(() => flightForm.DepartureDate)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Departure Time: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <FeatherIcon Name="FeatherIconName.Clock" Class="form-icon" />
                <TimeInput TValue="TimeOnly?" @bind-Value="flightForm.DepartureTime" onfocus="this.showPicker()" />
                <ValidationMessage For="@(() => flightForm.DepartureTime)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Arrival Date: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <FeatherIcon Name="FeatherIconName.Calendar" Class="form-icon" />
                <DateInput TValue="DateOnly?" @bind-Value="flightForm.ArrivalDate" Placeholder="Enter Date" onfocus="this.showPicker()" />
                <ValidationMessage For="@(() => flightForm.ArrivalDate)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Arrival Time: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <div class="form-group">
                <FeatherIcon Name="FeatherIconName.Clock" Class="form-icon" />
                <TimeInput TValue="TimeOnly?" @bind-Value="flightForm.ArrivalTime" onfocus="this.showPicker()" />
                <ValidationMessage For="@(() => flightForm.ArrivalTime)" class="invalid-feedback" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="ResetForm">Reset</Button>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Submit</Button>
        </div>
    </div>
</EditForm>

@code {
    private FlightForm flightForm = new();
    private EditContext? editContext;
    private bool isPristineForm = true;
    private string FormClass
    {
        get
        {
            return isPristineForm ? "needs-validation" : "needs-validation was-validated";
        }
    }
    [Inject] ToastService ToastService { get; set; } = default!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(flightForm);
        base.OnInitialized();
    }

    public void HandleValidSubmit()
    {
        isPristineForm = false;
        var toastMessage = new ToastMessage
        (
            type: ToastType.Success,
            iconName: IconName.Check2All,
            title: "Success!",
            helpText: $"{DateTime.Now.ToLocalTime()}",
            message: "Flight schedule created."
        );
        ToastService.Notify(toastMessage);
    }

    public void HandleInvalidSubmit()
    {
        isPristineForm = false;
    }

    private void ResetForm()
    {
        isPristineForm = true;
        flightForm = new();
        editContext = new EditContext(flightForm);
    }

    public class FlightForm
    {
        [Required(ErrorMessage = "Flight Number required.")]
        public string? FlightNumber { get; set; }

        [Required(ErrorMessage = "Departure Date required.")]
        public DateOnly? DepartureDate { get; set; }

        [Required(ErrorMessage = "Departure Time required.")]
        public TimeOnly? DepartureTime { get; set; }

        [Required(ErrorMessage = "Arrival Date required.")]
        public DateOnly? ArrivalDate { get; set; }

        [Required(ErrorMessage = "Arrival Time required.")]
        public TimeOnly? ArrivalTime { get; set; }
    }
}