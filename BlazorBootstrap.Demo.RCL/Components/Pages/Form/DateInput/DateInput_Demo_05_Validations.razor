@using System.ComponentModel.DataAnnotations

<EditForm EditContext="@editContext" OnInvalidSubmit="HandleOnInvalidSubmit" OnValidSubmit="HandleOnValidSubmit" class="@FormClass" novalidate>
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Date</label>
        <div class="form-group">
            <FeatherIcon Name="FeatherIconName.Calendar" Class="form-icon" />
            <DateInput TValue="DateOnly?" @bind-Value="invoice.InvoiceDate" Placeholder="Enter Date" onfocus="this.showPicker()" />
            <ValidationMessage For="@(() => invoice.InvoiceDate)" class="invalid-feedback" />
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Customer Name: <span class="text-danger">*</span></label>
        <div class="col-md-10">
            <TextInput @bind-Value="invoice.CustomerName" Placeholder="Enter Customer Name" />
            <ValidationMessage For="@(() => invoice.CustomerName)" class="invalid-feedback" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="ResetForm">Reset</Button>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Submit</Button>
        </div>
    </div>
</EditForm>

@code {
    private Invoice invoice = new();
    private EditContext? editContext;
    private bool isPristineForm = true; 
    private string FormClass
    {
        get
        {
            return isPristineForm ? "needs-validation" : "needs-validation was-validated";
        }
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(invoice);
        base.OnInitialized();
    }

    public void HandleOnValidSubmit()
    {
        isPristineForm = false;
        Console.WriteLine($"Invoice Date: {invoice.InvoiceDate}");
        Console.WriteLine($"Customer Name: {invoice.CustomerName}");
    }

    public void HandleOnInvalidSubmit()
    {
        isPristineForm = false;
    }

    private void ResetForm()
    {
        isPristineForm = true;
        invoice = new();
        editContext = new EditContext(invoice);
    }

    public class Invoice
    {
        [Required(ErrorMessage = "Invoice Date required.")]
        public DateOnly? InvoiceDate { get; set; }

        [Required(ErrorMessage = "Customer Name required.")]
        public string? CustomerName { get; set; }
    }
}